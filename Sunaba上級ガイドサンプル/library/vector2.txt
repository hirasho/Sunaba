include "utility.txt"
include "error.txt"
include "system.txt"

def Vector2_add(dst, v0, v1)
   dst[0] -> v0[0] + v1[0]
   dst[1] -> v0[1] + v1[1]

def Vector2_sub(dst, v0, v1)
   dst[0] -> v0[0] - v1[0]
   dst[1] -> v0[1] - v1[1]

def Vector2_mul(dst, v, scalar)
   dst[0] -> v[0] * scalar / 1000
   dst[1] -> v[1] * scalar / 1000

def Vector2_div(dst, v, scalar)
   if scalar = 0
      System_die(Error_ZERO_DIVISION)
   dst[0] -> v[0] * 1000 / scalar
   dst[1] -> v[1] * 1000 / scalar

def Vector2_madd(dst, v0, v1, scalar) #v0 + (v1 * scalar)
   dst[0] -> v0[0] + (v1[0] * scalar / 1000)
   dst[1] -> v0[1] + (v1[1] * scalar / 1000)

def Vector2_squareLength(v)
   return (v[0] * v[0]) + (v[1] * v[1])

def Vector2_length(v)
   return sqrt(Vector2_squareLength(v))

def Vector2_normalize(dst, v)
   l -> Vector2_squareLength(v) 
   if l > 0
      l -> sqrt(l)
      Vector2_div(dst, v, l)
