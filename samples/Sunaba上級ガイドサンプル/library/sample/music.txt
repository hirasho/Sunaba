include "..\memory.txt"
include "..\system.txt"
include "..\music.txt"

Memory_initialize()

noteCountAddress -> Memory_allocate(1)
lengthAddress -> Memory_allocate(1)

notes -> makeScore0(noteCountAddress, lengthAddress)
music0 -> Music_create(notes, noteCountAddress[0], 1, lengthAddress[0], 0)
Music_setTempo(music0, 50)
Music_setPitch(music0, 12)
Music_setVolume(music0, 100)
Memory_deallocate(notes)

notes -> makeScore1(noteCountAddress, lengthAddress)
music1 -> Music_create(notes, noteCountAddress[0], 1, lengthAddress[0], 1)
Music_setTempo(music1, 50)
Music_setPitch(music1, 12)
Music_setVolume(music1, 100)
Memory_deallocate(notes)

Memory_deallocate(lengthAddress)
Memory_deallocate(noteCountAddress)

#メインループ
while 1
   Music_update(music0)
   Music_update(music1)
   System_sync()

Music_destroy(music0)
Music_destroy(music1)

#--------------sub programs----------------

def makeScore0(noteCountAddr, lengthAddr)
   notes -> Memory_allocate(4 * 100)
   p -> notes
   p -> set4(p, 30, D4, 10, 2000)

   p -> set4(p, 40, G4, 10, 2000)
   p -> set4(p, 50, A4, 10, 2000)
   p -> set4(p, 60, B4, 10, 2000)
   p -> set4(p, 70, C5, 10, 2000)

   p -> set4(p, 80, D5, 10, 2000)
   p -> set4(p, 90, C5, 10, 2000)
   p -> set4(p, 95, B4, 10, 2000)
   p -> set4(p, 100, A4, 10, 2000)
   p -> set4(p, 110, D5, 10, 2000)

   p -> set4(p, 120, G5, 10, 2000)
   p -> set4(p, 130, FS5, 10, 2000)
   p -> set4(p, 140, E5, 10, 2000)
   p -> set4(p, 150, D5, 10, 2000)

   p -> set4(p, 160, D5, 10, 2000)
   p -> set4(p, 162, CS5, 10, 2000)
   p -> set4(p, 165, D5, 10, 2000)
   p -> set4(p, 167, CS5, 10, 2000)
   p -> set4(p, 170, B4, 10, 2000)
   p -> set4(p, 175, CS5, 10, 2000)
   p -> set4(p, 180, A4, 10, 2000)
   p -> set4(p, 185, B4, 10, 2000)
   p -> set4(p, 190, CS5, 10, 2000)
   p -> set4(p, 195, A4, 10, 2000)

   p -> set4(p, 200, A5, 10, 2000)
   p -> set4(p, 220, A5, 10, 2000)

   p -> set4(p, 240, B5, 10, 2000)
   p -> set4(p, 260, B5, 10, 2000)

   p -> set4(p, 280, A5, 10, 2000)
   p -> set4(p, 290, B5, 10, 2000)
   p -> set4(p, 300, A5, 10, 2000)
   p -> set4(p, 310, G5, 10, 2000)

   p -> set4(p, 320, G5, 10, 2000)
   p -> set4(p, 322, FS5, 10, 2000)
   p -> set4(p, 325, G5, 10, 2000)
   p -> set4(p, 327, FS5, 10, 2000)
   p -> set4(p, 330, E5, 10, 2000)
   p -> set4(p, 335, FS5, 10, 2000)
   p -> set4(p, 340, D5, 10, 2000)

   noteCountAddr[0] -> (p - notes) / 4
   lengthAddr[0] -> 360
   out -> notes

def makeScore1(noteCountAddr, lengthAddr)
   notes -> Memory_allocate(4 * 100)
   p -> notes
   p -> set4(p, 40, G3, 10, 2000)
   p -> set4(p, 60, G4, 10, 2000)

   p -> set4(p, 80, FS4, 10, 2000)
   p -> set4(p, 110, B4, 10, 2000)

   p -> set4(p, 120, E4, 10, 2000)
   p -> set4(p, 130, FS4, 10, 2000)
   p -> set4(p, 140, G4, 10, 2000)
   p -> set4(p, 150, E4, 10, 2000)

   p -> set4(p, 160, A4, 10, 2000)
   p -> set4(p, 170, G4, 10, 2000)
   p -> set4(p, 180, FS4, 10, 2000)
   p -> set4(p, 190, E4, 10, 2000)

   p -> set4(p, 200, FS4, 10, 2000)
   p -> set4(p, 210, A4, 10, 2000)
   p -> set4(p, 220, D5, 10, 2000)
   p -> set4(p, 230, CS5, 10, 2000)

   p -> set4(p, 240, G5, 10, 2000)
   p -> set4(p, 250, FS5, 10, 2000)
   p -> set4(p, 260, E5, 10, 2000)
   p -> set4(p, 270, D5, 10, 2000)

   p -> set4(p, 280, D5, 10, 2000)
   p -> set4(p, 282, CS5, 10, 2000)
   p -> set4(p, 285, D5, 10, 2000)
   p -> set4(p, 287, CS5, 10, 2000)
   p -> set4(p, 290, D5, 10, 2000)
   p -> set4(p, 292, CS5, 10, 2000)
   p -> set4(p, 295, D5, 10, 2000)
   p -> set4(p, 297, CS5, 10, 2000)
   p -> set4(p, 300, D5, 10, 2000)
   p -> set4(p, 302, CS5, 10, 2000)
   p -> set4(p, 305, D5, 10, 2000)
   p -> set4(p, 307, CS5, 10, 2000)
   p -> set4(p, 310, D5, 10, 2000)
   p -> set4(p, 312, CS5, 10, 2000)
   p -> set4(p, 315, B4, 10, 2000)
   p -> set4(p, 317, CS5, 10, 2000)

   p -> set4(p, 320, D5, 10, 2000)
   p -> set4(p, 325, A4, 10, 2000)
   p -> set4(p, 330, G4, 10, 2000)
   p -> set4(p, 335, A4, 10, 2000)
   p -> set4(p, 340, FS4, 10, 2000)

   noteCountAddr[0] -> (p - notes) / 4
   lengthAddr[0] -> 360
   out -> notes
