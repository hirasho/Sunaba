include "system.txt"

/*
Noteオブジェクト
0 : 発音カウント
1 : 音名(60がC4)
2 : 減衰(0-1000)
3 : 振幅(0-10000)

Musicオブジェクト
0 : カウント
1 : ループする？
2 : notesの現在位置
3 : noteCount
4 : 使うチャンネル
5 : カウント単位の長さ
6 : テンポ(%)
7 : ピッチ調整
8 : マスターボリューム(%)
9から : notesのコピー(noteCount * 4)
*/
def Music_create(notes, noteCount, loop?, lengthInCount, channel)
   this -> Memory_allocate(9 + (noteCount * 4) + 128)
   this[0] -> 0
   this[1] -> loop?
   this[2] -> 0
   this[3] -> noteCount
   this[4] -> channel
   this[5] -> lengthInCount
   this[6] -> 100
   this[7] -> 0
   this[8] -> 100
   #楽譜コピー
   p -> this + 9
   i -> 0
   while i < noteCount
      if (notes[0] < 0) + 
      (notes[0] >= lengthInCount) +
      (notes[1] < 0) + 
      (notes[1] >= 128) +
      (notes[2] < 0) + 
      (notes[2] > 10000) +
      (notes[3] < 0) + 
      (notes[3] > 10000)
         System_outputNumber(i)
         System_outputChar(32)
         System_die(Error_OUT_OF_RANGE)
      p[0] -> notes[0]
      p[1] -> notes[1]
      p[2] -> notes[2]
      p[3] -> notes[3]
      i -> i + 1
      p -> p + 4
      notes -> notes + 4
   table -> this + 9 + (noteCount * 4) 
   #上方向
   i -> 69
   freq -> 440
   while i < 128
      table[i] -> freq
      freq -> ((freq * 105946) + 50000) / 100000
      i -> i + 1
   #下方向
   i -> 69
   freq -> 440
   while i >= 0
      table[i] -> freq
      freq -> ((freq * 94387) + 50000) / 100000
      i -> i - 1
   out -> this

def Music_setTempo(this, tempo)
   this[6] -> tempo

def Music_setPitch(this, pitch)
   this[7] -> pitch

def Music_setVolume(this, volume)
   this[8] -> volume

def Music_update(this)
   count -> this[0]
   loop? -> this[1]
   notePos -> this[2]
   noteCount -> this[3]
   channel -> this[4]
   lengthInCount -> this[5]
   tempo -> this[6]
   pitch -> this[7]
   volume ->this[8]
   notes -> this + 9
   note -> notes + (notePos * 4)
   table -> this + 9 + (noteCount * 4) 
   #発音処理
   if (count * tempo / 100) = note[0]
      name -> note[1] + pitch
      if (name < 0) + (name > 128)
         System_die(Error_OUT_OF_RANGE)
      freq -> table[name]
      vol -> note[3] * volume / 100
      System_playSound(channel, freq, note[2], vol)
      notePos -> notePos + 1
   #時刻を進めてループ処理
   count -> count + 1
   if loop? * ((count * tempo / 100) = lengthInCount)
      count -> 0
      notePos -> 0
   #書き戻し
   this[0] -> count
   this[2] -> notePos

def Music_destroy(this)
   Memory_deallocate(this)

def Music_finished(this)
   loop? -> this[1]
   out -> 0 #ループするなら永遠に終わらない 
   if loop? = 1 
      notePos -> this[2]
      noteCount -> this[3]
      out -> (notePos >= noteCount)

#音名定数群
const C2 -> 36
const CS2 -> 37
const DF2 -> 37
const D2 -> 38
const DS2 -> 39
const EF2 -> 39
const E2 -> 40
const F2 -> 41
const FS2 -> 42
const GF2 -> 42
const G2 -> 43
const GS2 -> 44
const AF2 -> 44
const A2 -> 45
const AS2 -> 46
const BF2 -> 46
const B2 -> 47

const C3 -> 48
const CS3 -> 49
const DF3 -> 49
const D3 -> 50
const DS3 -> 51
const EF3 -> 51
const E3 -> 52
const F3 -> 53
const FS3 -> 54
const GF3 -> 54
const G3 -> 55
const GS3 -> 56
const AF3 -> 56
const A3 -> 57
const AS3 -> 58
const BF3 -> 58
const B3 -> 59

const C4 -> 60
const CS4 -> 61
const DF4 -> 61
const D4 -> 62
const DS4 -> 63
const EF4 -> 63
const E4 -> 64
const F4 -> 65
const FS4 -> 66
const GF4 -> 66
const G4 -> 67
const GS4 -> 68
const AF4 -> 68
const A4 -> 69
const AS4 -> 70
const BF4 -> 70
const B4 -> 71

const C5 -> 72
const CS5 -> 73
const DF5 -> 73
const D5 -> 74
const DS5 -> 75
const EF5 -> 75
const E5 -> 76
const F5 -> 77
const FS5 -> 78
const GF5 -> 78
const G5 -> 79
const GS5 -> 80
const AF5 -> 80
const A5 -> 81
const AS5 -> 82
const BF5 -> 82
const B5 -> 83

const C6 -> 84
const CS6 -> 85
const DF6 -> 85
const D6 -> 86
const DS6 -> 87
const EF6 -> 87
const E6 -> 88
const F6 -> 89
const FS6 -> 90
const GF6 -> 90
const G6 -> 91
const GS6 -> 92 
const AF6 -> 92
const A6 -> 93
const AS6 -> 94
const BF6 -> 94
const B6 -> 95
