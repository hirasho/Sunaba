include "ioMap.txt"
include "system.txt"
include "error.txt"

# これを使ってメモリ確保する場合、自分で番号を指定して使うことは禁止となる

# 単純なアロケータ

def Memory_initialize() # 0番を現在位置として持つ
   #1番、2番、は中身0バイトダミーブロック
   memory[1] -> 4 #次ブロックポインタ
   memory[2] -> 0 #解放フラグ。永遠に解放されない。
   memory[3] -> 1 #ブロック先頭は1
   memory[0] -> 4 #4番地から

def Memory_allocate(size)
   if (memory[1] != 4) + (memory[2] != 0) + (memory[3] != 1)
      System_die(Error_NOT_INITIALIZED)
   # メモリブロックは、サイズ、解放フラグを前に、後ろに先頭ポインタで3バイトを余計に持つ。
   # メモリ枯渇
   out -> -1 #エラー時
   next -> memory[0] + 2 + size + 1
   if next < memory[MEM_FREE_REGION_END]
      block -> memory[0]
      memory[0] -> next
      block[0] -> next #次ブロックポインタ
      block[1] -> 0 #解放フラグ
      block[2 + size] -> block #先頭ポインタ
      # 取りたてであることを示すために埋めておく
      setMemory(block + 2, -111111111, size)
      out -> block + 2

def Memory_deallocate(address)
   if (memory[1] != 4) + (memory[2] != 0) + (memory[3] != 1)
      System_die(Error_NOT_INITIALIZED)
   block -> address - 2
   # 解放したので全部適当な数をセットしてしまう
   setMemory(block + 2, -333333333, block[0] - block - 2)

   # 解放フラグを立てる
   block[1] -> 1
   # 解放ループ
   continue -> 1
   while continue
      if block[1] > 1
         System_die(Error_MEMORY_DESTRUCTION)
      if block[1] = 0 #使用中なので終える
         continue -> 0
      if block[1] = 1 
         if block[0] != memory[0] #末尾でない
            continue -> 0
         if block[0] = memory[0] #末尾である
            memory[0] -> block #解放
            block -> block[-1] #一つ前に前のブロックの先頭ポインタが入っている


