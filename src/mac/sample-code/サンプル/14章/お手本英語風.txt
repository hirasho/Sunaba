preparePatterns()
memory[55001] -> 1 #手加減オフ
drawWallAndFloor()
y -> 1
x -> 5 
angle -> 0
type -> 0
oldLeft -> memory[50006]
oldRight -> memory[50007]
oldUp -> memory[50004]
fallCount -> 0
while 1 #無限
   nowLeft -> memory[50006]
   nowRight -> memory[50007]
   nowUp -> memory[50004]
   #移動量
   moveX -> 0
   moveY -> 0
   rotation -> 0
   if (oldLeft = 0) * (nowLeft = 1)
      moveX -> -1
   if (oldRight = 0) * (nowRight = 1)
      moveX -> 1
   if (oldUp = 0) * (nowUp = 1)
      rotation -> 1
   #キー状態を使い終わったので,古いのを新しいので上書き
   oldLeft -> nowLeft
   oldRight -> nowRight
   oldUp -> nowUp
   #落ちる
   fallCount -> fallCount + 1
   if fallCount = 10
      moveY -> 1
      fallCount -> 0
   #移動を反映
   y -> y + moveY
   x -> x + moveX
   angle -> angle + rotation
   if hit?(y,x,angle,type)
      #戻す
      y -> y - moveY
      x -> x - moveX
      angle -> angle - rotation
      if (moveY > 0) * (moveX = 0) 
         stackAndErase(y,x,angle,type)
         y -> 1
         x -> 5
         angle -> 0
	 type -> type + 1
	 if type > 6 
	    type -> 0
   moveSquare(y,x,angle,type)

def preparePatterns()
   store6values(500,0,-1,0,1,0,2) #形0
   store6values(506,-1,-1,0,-1,0,1) #形1
   store6values(512,0,-1,-1,0,0,1) #形2
   store6values(518,0,-1,-1,1,0,1) #形3
   store6values(524,0,-1,1,0,1,1) #形4
   store6values(530,0,1,1,0,1,1) #形5
   store6values(536,0,1,1,-1,1,0) #形6

def store6values(address,n0,n1,n2,n3,n4,n5)
   memory[address + 0] -> n0
   memory[address + 1] -> n1
   memory[address + 2] -> n2
   memory[address + 3] -> n3
   memory[address + 4] -> n4
   memory[address + 5] -> n5

def calculateCellPosition(y,x,angle,type)
   memory[0] -> y
   memory[1] -> x
   address -> 500 + (type * 6)
   i -> 0
   while i < 3
      relY -> memory[address + (i * 2) + 0]
      relX -> memory[address + (i * 2) + 1]
      rotCount -> 0
      while rotCount < angle
         #入れ替え
         tmp -> relY
	 relY -> relX
	 relX -> tmp
	 #プラスマイナスひっくり返す
	 relX -> -relX
	 rotCount -> rotCount + 1
      memory[2 + (i * 2)] -> y + relY
      memory[3 + (i * 2)] -> x + relX
      i -> i + 1

def hit?(y,x,angle,type)
   calculateCellPosition(y,x,angle,type)
   out -> (memory[100 + (memory[0] * 12) + memory[1]] = 1) + 
      (memory[100 + (memory[2] * 12) + memory[3]] = 1) +
      (memory[100 + (memory[4] * 12) + memory[5]] = 1) +
      (memory[100 + (memory[6] * 12) + memory[7]] = 1)

def stackAndErase(y,x,angle,type)
   calculateCellPosition(y,x,angle,type)
   stack(memory[0],memory[1])
   stack(memory[2],memory[3])
   stack(memory[4],memory[5])
   stack(memory[6],memory[7])
   erase()

def moveSquare(y,x,angle,type)
   calculateCellPosition(y,x,angle,type)
   square(memory[0],memory[1],990000) #赤
   square(memory[2],memory[3],990000) #赤
   square(memory[4],memory[5],990000) #赤
   square(memory[6],memory[7],990000) #赤
   memory[55000] -> 1 #お手紙
   square(memory[0],memory[1],0) #消す
   square(memory[2],memory[3],0) #消す
   square(memory[4],memory[5],0) #消す
   square(memory[6],memory[7],0) #消す

def stack(y,x)
   memory[100 + (y * 12) + x] -> 1
   square(y,x,999999)

def drawWallAndFloor()
   drawWall()
   drawFloor()

def drawWall()
   i -> 0
   while i < 20 
      stack(i,0) #左
      stack(i,11) #右
      i -> i + 1

def drawFloor()
   i -> 0
   while i < 10
      stack(19,1 + i)
      i -> i + 1

def square(y,x,color)
   yi -> 0
   while yi < 4 
      xi -> 0
      while xi < 4
         memory[60000 + (y * 500) + (x * 5) + 
            xi + (yi * 100)] -> color
         xi -> xi + 1
      yi -> yi + 1

def erase()
   y -> 0
   while y < 19
      filled? -> 1
      i -> 0
      while i < 10
         filled? -> filled? * (memory[100 + (y * 12) + i + 1] = 1)
         i -> i + 1
      if filled?
         #積もったと覚えているmemoryを0にする
         i -> 0
         while i < 10 
            memory[100 + (y * 12) + i + 1] -> 0 #memoryを0に
            square(y,i + 1,0) #黒で塗りつぶす
            i -> i + 1
         moveLine(y)
      y -> y + 1

def moveLine(eraseY)
   y -> eraseY - 1
   while y >= 0
      x -> 1
      while x <= 10
         if memory[100 + (y * 12) + x] = 1
            memory[100 + (y * 12) + x] -> 0 #消す
            square(y,x,0) #黒く塗る
            stack(y + 1,x)
         x -> x + 1
      y -> y - 1
